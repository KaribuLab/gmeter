# Configuración de GMeter
log_file: "gmeter.log"
response_log_file: "gmeter_responses.log" # Archivo separado para guardar las respuestas HTTP completas
report_dir: "reports"

# Configuración global
global:
  threads_per_second: 5  # Número de hilos por segundo global (para compatibilidad)
  min_threads: 2         # Número mínimo de hilos al inicio
  max_threads: 10        # Número máximo de hilos a alcanzar
  duration: "10s"        # Duración total de la prueba
  ramp_up: "2s"          # Tiempo de rampa para alcanzar el número total de hilos

# Servicios a probar
services:
  - name: "auth"
    url: "http://localhost:8080/auth"  # URL del servicio de autenticación
    method: "POST"
    headers:
      Content-Type: "application/json"
      X-Request-ID: "{{uuid}}"  # Generar un UUID para cada solicitud
    body: |
      {
        "username": "test",
        "password": "password",
        "request_id": "{{uuid}}"  # Generar un UUID único para cada solicitud
      }
    extract_token: "token"  # Nombre del campo que contiene el token en la respuesta JSON
    token_name: "auth_token"  # Nombre con el que se guardará el token
    cache_token: true  # Activar caché para el token (evita peticiones innecesarias)
    token_expiry: "1h"  # El token expira después de 1 hora
    min_threads: 1            # Mínimo 1 hilo para autenticación
    max_threads: 1            # Máximo 1 hilo para autenticación

  - name: "auth_form"
    url: "{{api_base_url}}/oauth2/token"  # URL desde variable de entorno
    method: "POST"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    content_type: "form"  # Especificar que es un formulario
    form_data:  # Datos estáticos del formulario con secretos desde variables de entorno
      grant_type: "client_credentials"
      client_id: "{{oauth2_client_id}}"
      client_secret: "{{oauth2_client_secret}}"
      scope: "read write"
    extract_token: "access_token"
    token_name: "oauth_token"
    cache_token: true  # Activar caché para el token
    token_expiry: "30m"  # El token expira después de 30 minutos
    min_threads: 1
    max_threads: 1

  - name: "get_profile"
    url: "http://localhost:8080/profile"  # URL del servicio de perfil
    method: "GET"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{.auth_token}}"  # Usar el token extraído
    depends_on: "auth"                         # Depende del servicio de autenticación
    min_threads: 2                             # Iniciar con 2 hilos
    max_threads: 10                            # Aumentar hasta 10 hilos durante la rampa

  - name: "update_profile"
    url: "http://localhost:8080/update"  # URL del servicio de actualización
    method: "POST"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{.auth_token}}"  # Usar el token extraído
    body: |
      {
        "name": "Test User",
        "email": "test@example.com"
      }
    depends_on: "auth"  # Depende del servicio de autenticación
    # Si no se especifican min_threads y max_threads, se usarán los valores globales (2-10)

  - name: "update_profile_form"
    url: "http://localhost:8080/update_form"  # URL del servicio de actualización con form-urlencoded
    method: "POST"
    headers:
      Content-Type: "application/x-www-form-urlencoded"
      Authorization: "Bearer {{.form_token}}"  # Usar el token extraído del servicio form
      X-API-Key: "{{api_key}}"  # API Key desde variable de entorno
    content_type: "form"
    form_data_template:
      name: "{{.name}}"
      email: "{{.email}}"
    data_source: "profiles"
    depends_on: "auth_form"  # Depende del servicio de autenticación form
    min_threads: 1           # Iniciar con 1 hilo
    max_threads: 5           # Aumentar hasta 5 hilos durante la rampa

# Fuentes de datos
data_sources:
  csv:
    users:
      path: "data/users.csv"
      delimiter: ","
      has_header: true
    profiles:
      path: "data/profiles.csv"
      delimiter: ","
      has_header: true 